function [Nc, B, M_y] = suboptimalnormalforceaugmentation(tf, tr, a, b, F_fl, F_fr, F_rl, F_rr, ackermanyawraterate, I_zz, last_Nc, M)
% tuning parameters
lambda = 1;
zeta = 1;

N_xfl = F_fl(1)/F_fl(3);
N_yfl = F_fl(2)/F_fl(3);
N_xfr = F_fr(1)/F_fr(3);
N_yfr = F_fr(2)/F_fr(3);
N_xrl = F_rl(1)/F_rl(3);
N_yrl = F_rl(2)/F_rl(3);
N_xrr = F_rr(1)/F_rr(3);
N_yrr = F_rr(2)/F_rr(3);

M_y = (ackermanyawraterate)*I_zz;


% B = (tf/2*N_xfl - a*N_yfl) + (tf/2*N_xfr + a*N_yfr) ...
%     + (-tr/2*N_xrl - b*N_yrl) + (tr/2*N_xrr + b*N_yrr);
% 
% f = @(Nc) abs(B*Nc - M_y) + lambda*abs(Nc) + zeta*abs(Nc - last_Nc);
% options = optimset('MaxFunEvals', 2e10);
% [Nc, ~] = fminsearch(f, 0.1, options);


B_vec = [(tf/2*N_xfl - a*N_yfl)+(tf/2*N_xfr + a*N_yfr)+ (-tr/2*N_xrl - b*N_yrl)+(-tr/2*N_xrr + b*N_yrr)];

g = 9.81;
% f = @(Nc_vec) (B_vec*[Nc_vec(1); Nc_vec(2)] - M_y)^2 + lambda*((Nc_vec(1)+Nc_vec(2)))^2 + zeta*((Nc_vec(1)+Nc_vec(2)) - last_Nc*M*9.81)^2;
% f = @(Nc) (norm(B_vec*[Nc(1); Nc(2)] - M_y))^2 + lambda*(norm([Nc(1); Nc(2)]))^2 + zeta*(norm([Nc(1); Nc(2)] - last_Nc.*M.*9.81))^2;
f = @(Nc) norm(B_vec.*(Nc*M*g/2) - M_y)^2 + lambda*(norm(Nc*M*g/2))^2 + zeta*(norm((Nc*M*g/2)) - last_Nc*M*g/2)^2;

options = optimset('MaxIter', 2e100, 'MaxFunEvals',2e100);
[Nc_vec, ~] = fminsearch(f, 0.0, options);

% [Nc_vec, ~] = fminsearch(f, [0; 0], options);
% [Nc, ~] = fminunc(f, [0; 0], options);

% B = B_vec * [Nc_vec(1);Nc_vec(2)];
%Nc = (Nc_vec(1)+Nc_vec(2))/(M*9.81);
Nc = Nc_vec;
B = norm(B_vec);

limitval = 0.3;

Nc = min(max(Nc,-limitval), limitval);
% Nc = M_y/B;
end